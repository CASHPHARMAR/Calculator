import { motion, AnimatePresence } from "framer-motion";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { Trash2, Calculator, FileDown, FileText } from "lucide-react";
import type { Calculation } from "@shared/schema";
import { jsPDF } from "jspdf";
import { saveAs } from "file-saver";
import { useToast } from "@/hooks/use-toast";

interface HistoryPanelProps {
  onHistoryClick: (result: string) => void;
}

export default function HistoryPanel({ onHistoryClick }: HistoryPanelProps) {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const { data: calculations = [], isLoading } = useQuery<Calculation[]>({
    queryKey: ["/api/calculations"],
  });

  const clearHistory = () => {
    // In a real app, this would call an API endpoint to clear history
    queryClient.setQueryData(["/api/calculations"], []);
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "currency":
        return "ðŸ’±";
      case "scientific":
        return "ðŸ”¬";
      default:
        return "ðŸ§®";
    }
  };

  const exportAsPDF = () => {
    if (calculations.length === 0) return;
    
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.width;
      const maxLineWidth = pageWidth - 40; // 20px margins on each side
      
      // Title
      doc.setFontSize(20);
      doc.text("3D Calculator - Calculation History", 20, 30);
      
      // Export date
      doc.setFontSize(12);
      doc.text(`Exported on: ${new Date().toLocaleString()}`, 20, 45);
      
      // Content
      let yPosition = 70;
      doc.setFontSize(10);
      
      const addNewPageIfNeeded = (requiredSpace: number) => {
        if (yPosition + requiredSpace > 270) {
          doc.addPage();
          yPosition = 30;
          // Add header on new page
          doc.setFontSize(12);
          doc.text("3D Calculator - Calculation History (continued)", 20, yPosition);
          yPosition += 20;
          doc.setFontSize(10);
        }
      };
      
      calculations.forEach((calc, index) => {
        addNewPageIfNeeded(50); // Reserve space for entry
        
        // Type and index
        const typeText = calc.type === 'currency' ? '[CURRENCY]' : calc.type === 'scientific' ? '[SCIENTIFIC]' : '[BASIC]';
        doc.text(`${index + 1}. ${typeText}`, 20, yPosition);
        yPosition += 12;
        
        // Expression with text wrapping
        const expressionText = `Expression: ${calc.expression}`;
        const expressionLines = doc.splitTextToSize(expressionText, maxLineWidth - 20);
        doc.text(expressionLines, 30, yPosition);
        yPosition += expressionLines.length * 5 + 3;
        
        // Result with text wrapping
        const resultText = `Result: ${calc.result}`;
        const resultLines = doc.splitTextToSize(resultText, maxLineWidth - 20);
        doc.text(resultLines, 30, yPosition);
        yPosition += resultLines.length * 5 + 3;
        
        // Date
        const dateText = `Date: ${new Date(calc.createdAt).toLocaleString()}`;
        doc.text(dateText, 30, yPosition);
        yPosition += 15; // Space between entries
      });
      
      doc.save('calculation-history.pdf');
      
      toast({
        title: "Export Successful",
        description: "PDF file has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate PDF file. Please try again.",
        variant: "destructive",
      });
      console.error("PDF export error:", error);
    }
  };

  const exportAsText = () => {
    if (calculations.length === 0) return;
    
    try {
      let content = "3D Calculator - Calculation History\n";
      content += "===================================\n\n";
      content += `Exported on: ${new Date().toLocaleString()}\n`;
      content += `Total entries: ${calculations.length}\n\n`;
      
      calculations.forEach((calc, index) => {
        const typeText = calc.type === 'currency' ? '[CURRENCY]' : calc.type === 'scientific' ? '[SCIENTIFIC]' : '[BASIC]';
        content += `${index + 1}. ${typeText}\n`;
        content += `   Expression: ${calc.expression}\n`;
        content += `   Result: ${calc.result}\n`;
        content += `   Date: ${new Date(calc.createdAt).toLocaleString()}\n`;
        content += "\n";
      });
      
      content += `\nGenerated by 3D Calculator on ${new Date().toLocaleDateString()}\n`;
      
      const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
      saveAs(blob, 'calculation-history.txt');
      
      toast({
        title: "Export Successful",
        description: "Text file has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate text file. Please try again.",
        variant: "destructive",
      });
      console.error("Text export error:", error);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
      className="glass-panel rounded-3xl p-6 h-fit"
    >
      <div className="mb-4">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-xl font-bold text-white flex items-center gap-2">
            <Calculator className="w-5 h-5" />
            History
          </h3>
          {calculations.length > 0 && (
            <button
              onClick={clearHistory}
              className="text-gray-400 hover:text-red-400 transition-colors"
              data-testid="button-clear-history"
            >
              <Trash2 className="w-4 h-4" />
            </button>
          )}
        </div>
        
        {/* Export Buttons */}
        {calculations.length > 0 && (
          <div className="flex gap-2">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={exportAsPDF}
              className="flex-1 flex items-center justify-center gap-2 neon-button py-2 rounded-lg text-white text-xs font-medium"
              data-testid="button-export-pdf"
            >
              <FileDown className="w-3 h-3" />
              Export PDF
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={exportAsText}
              className="flex-1 flex items-center justify-center gap-2 neon-button py-2 rounded-lg text-white text-xs font-medium"
              data-testid="button-export-text"
            >
              <FileText className="w-3 h-3" />
              Export TXT
            </motion.button>
          </div>
        )}
      </div>

      <div className="space-y-3" data-testid="history-list">
        <AnimatePresence>
          {isLoading ? (
            <div className="text-gray-400 text-center py-4">Loading...</div>
          ) : calculations.length === 0 ? (
            <div className="text-gray-400 text-center py-4">
              No calculations yet
            </div>
          ) : (
            calculations.map((calc, index) => (
              <motion.div
                key={calc.id}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2, delay: index * 0.05 }}
                onClick={() => onHistoryClick(calc.result)}
                className="glass-panel rounded-xl p-3 cursor-pointer hover:bg-white/10 transition-all duration-200 hover:scale-[1.02] hover:shadow-lg hover:shadow-cyan-500/20"
                data-testid={`history-item-${index}`}
              >
                <div className="flex items-center justify-between mb-1">
                  <div className="text-gray-300 text-sm font-mono">
                    {calc.expression}
                  </div>
                  <span className="text-xs">{getTypeIcon(calc.type)}</span>
                </div>
                <div className="text-white font-mono text-lg">
                  = {calc.result}
                </div>
              </motion.div>
            ))
          )}
        </AnimatePresence>
      </div>

      {calculations.length > 0 && (
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={clearHistory}
          className="w-full mt-4 neon-button py-2 rounded-xl text-white font-medium text-sm"
          data-testid="button-clear-history-full"
        >
          Clear History
        </motion.button>
      )}
    </motion.div>
  );
}
